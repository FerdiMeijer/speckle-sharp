# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Create Installer

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version of the installer to make'     
        required: true

jobs:
  build:
    runs-on: windows-2019 # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    env:
        GH_PKG_USER: ${{ secrets.GH_PKG_USER }} 
        GH_PKG_TOKEN: ${{ secrets.GH_PKG_TOKEN }}                     
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Calculate tag version
      id: calculateTagVersion
      shell: powershell
      run: |
        $tag = "${{ github.event.inputs.version }}.$($env:GITHUB_RUN_ID%65536)"
        echo "::set-output name=tag::$tag"

    - name: Install the latest version of nuget
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: 'latest'

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2    

    - name: Restore SpeckleConnectionManager
      run: dotnet restore        
      working-directory: Installer/ConnectionManager

    - name: Build SpeckleConnectionManager and SpeckleConnectionManagerUI
      run: dotnet publish -c Release -p:Version=${{ github.event.inputs.version }}
      working-directory: Installer/ConnectionManager
